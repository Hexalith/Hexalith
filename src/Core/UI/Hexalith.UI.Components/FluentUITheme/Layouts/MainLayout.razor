@inherits LayoutComponentBase
@using Hexalith.UI.Components.Configurations
@using Microsoft.AspNetCore.Components.Sections
@using Microsoft.Extensions.Options
@using System.Security.Claims
@inject IOptions<FluentUIThemeSettings> ThemeSettings
@inject Hexalith.UI.Components.IMenuService MenuService
<FluentLayout Style="width:100%;">
    <FluentHeader Style="height:60px;">
        <HexApplicationTitle />
        <FluentSpacer />
        <SectionOutlet SectionName="ApplicationHeaderContent" />
        <FluentSpacer />
        <SectionOutlet SectionName="ModuleHeaderContent" />
        <FluentSpacer />
        <HexProfileMenu />
    </FluentHeader>
    <FluentStack Class="body-stack" Orientation="Orientation.Horizontal" Width="100%">
        <MainMenu User="_user" />
        <FluentBodyContent Style="height: calc(100dvh - 100px);">
            @Body
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter Style="@("height: 40px; color: white; text-align: center; font-size: var(--type-ramp-minus-1-font-size); line-height: var(--type-ramp-base-line-height);")">
        <HexVersion />
        <FluentSpacer />
        <div class="copy">
            ITANEO ©2024.
        </div>
    </FluentFooter>
</FluentLayout>
@* </FluentDesignSystemProvider> *@
<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>
<FluentToastProvider />
<FluentDialogProvider />
<FluentTooltipProvider />
<FluentMessageBarProvider />
<FluentMenuProvider />

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private ClaimsPrincipal? _user;

    List<MenuItemInformation>? MenuItems;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateTask is not null)
        {
            var authState = await AuthenticationStateTask;
            _user = authState.User;
            MenuItems = MenuService.GetMenuItemsAsync(_user, CancellationToken.None).ToBlockingEnumerable().ToList();
        }
        await base.OnInitializedAsync();
    }
}
