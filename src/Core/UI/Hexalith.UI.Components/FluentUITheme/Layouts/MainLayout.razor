@inherits LayoutComponentBase
@using Hexalith.UI.Components.Configurations
@using Hexalith.UI.Components.FluentUITheme
@using Microsoft.AspNetCore.Components.Sections
@using Microsoft.Extensions.Options
@using Hexalith.UI.Components.Helpers
@using System.Reflection
@inject IOptions<FluentUIThemeSettings> ThemeSettings
@inject IEnumerable<MenuItemInformation> MenuItems

<FluentDesignSystemProvider AccentBaseColor="@ThemeSettings.Value.AccentBaseColor"
							StrokeWidth="@ThemeSettings.Value.StrokeWidth"
							FillColor="@ThemeSettings.Value.FillColor">

	<FluentLayout Style="width:100%;">
		<FluentHeader Style="height:60px;">
			<HexApplicationTitle />
			<FluentSpacer />
			<SectionOutlet SectionName="ApplicationHeaderContent" />
			<FluentSpacer />
			<SectionOutlet SectionName="ModuleHeaderContent" />
			<FluentSpacer />
			<HexProfileMenu/>
		</FluentHeader>
		<FluentStack Class="body-stack" Orientation="Orientation.Horizontal" Width="100%">
			<FluentNavMenu Class="navmenu" Width="300">
				@{
					foreach (MenuItemInformation menuItem in MenuItems.OrderByDescending(p => p.OrderWeigth))
					{
						if (menuItem.SubItems.Any())
						{
							<FluentNavGroup Title="@menuItem.Name"
											Icon="@menuItem.Icon.ToFluentNavIcon()"
											IconColor="Color.Accent"
											@bind-Expanded="Expanded[GetMenuItemId(menuItem)]">
								@foreach (var subItem in menuItem.SubItems.OrderByDescending(p => p.OrderWeigth))
								{
									if (subItem.SubItems.Any())
									{
										<FluentNavGroup Title="@subItem.Name"
														Icon="@subItem.Icon.ToFluentNavIcon()"
														IconColor="Color.Accent"
														@bind-Expanded="Expanded[GetMenuItemId(subItem)]">
											@foreach (var subSubItem in subItem.SubItems)
											{
												if (subSubItem.SubItems.Any())
												{
													<FluentNavGroup Title="@subSubItem.Name"
																	Icon="@subSubItem.Icon.ToFluentNavIcon()"
																	IconColor="Color.Accent"
																	@bind-Expanded="Expanded[GetMenuItemId(subSubItem)]">
														@foreach (var subSubSubItem in subSubItem.SubItems.OrderByDescending(p => p.OrderWeigth))
														{
															<FluentNavLink Icon="@subSubSubItem.Icon.ToFluentNavIcon()" Href="@subSubSubItem.Path">@subSubSubItem.Name</FluentNavLink>
															if (subSubSubItem.DividerAfter)
															{
																<FluentDivider />
															}
														}
													</FluentNavGroup>
												}
												else
												{
													<FluentNavLink Icon="@subSubItem.Icon.ToFluentNavIcon()" Href="@subSubItem.Path">@subSubItem.Name</FluentNavLink>
													if (subSubItem.DividerAfter)
													{
														<FluentDivider />
													}
												}
											}
										</FluentNavGroup>
									}
									else
									{
										<FluentNavLink Icon="@subItem.Icon.ToFluentNavIcon()" Href="@subItem.Path">@subItem.Name</FluentNavLink>
										if (subItem.DividerAfter)
										{
											<FluentDivider />
										}
									}
								}
							</FluentNavGroup>
						}
						else
						{
							<FluentNavLink Icon="@menuItem.Icon.ToFluentNavIcon()" Href="@menuItem.Path">@menuItem.Name</FluentNavLink>
							if (menuItem.DividerAfter)
							{
								<FluentDivider />
							}
						}
					}
				}
			</FluentNavMenu>
			<FluentBodyContent Style="height: calc(100dvh - 100px);">
				@Body
				<FluentToastProvider />
				<FluentDialogProvider />
				<FluentTooltipProvider />
				<FluentMessageBarProvider />
				<FluentMenuProvider />
			</FluentBodyContent>
		</FluentStack>
		<FluentFooter Style="@("height: 40px; color: white; text-align: center; font-size: var(--type-ramp-minus-1-font-size); line-height: var(--type-ramp-base-line-height);")">
			<HexVersion />
			<FluentSpacer />
			<div class="copy">
				Jérôme Piquot © 2024.
			</div>
		</FluentFooter>
	</FluentLayout>
	@* 	<FluentFooter>
	<SectionOutlet SectionName="ApplicationFooterContent" />
	</FluentFooter>
	*@
</FluentDesignSystemProvider>
<div id="blazor-error-ui" data-nosnippet>
	An unhandled error has occurred.
	<a href="." class="reload">Reload</a>
	<span class="dismiss">🗙</span>
</div>

@code {
	class ExpandedMenuItems
	{
		// Dictionary of all expanded item states
		private Dictionary<int, bool> Data = [];

		// Define the indexer to allow client code to use [] notation.
		public bool this[int i]
		{
			get
			{
				if (Data.TryGetValue(i, out bool expanded))
					return expanded;
				return false;
			}
			set
			{
				if (!Data.TryAdd(i, value))
				{
					Data[i] = value;
				}
			}
		}
	}
	private ExpandedMenuItems Expanded = new();

	private int GetMenuItemId(MenuItemInformation menuItem)
	{
		int index = 0;
		foreach (MenuItemInformation mi in MenuItems)
		{
			(bool found, index) = mi.GetMenuItemIndex(index, menuItem);
			if (found)
			{
				return index;
			}
		}
		throw new InvalidOperationException("MenuItem not found");
	}
}
