@inject NavigationManager NavigationManager
@inject ICommandService CommandService
@inject IToastService ToastService
@inherits FluentComponentBase
@typeparam TEntityViewModel where TEntityViewModel : class, IEntityViewModel

@using FluentValidation.Results
@using Hexalith.Application.Commands
@using Hexalith.Extensions.Helpers
@using Hexalith.UI.Components.Pages
@using Labels = Hexalith.UI.Components.Resources.FluentUITheme;
@using System.Security.Claims
<HexEntityDetailsToolbar IndexPath="@IndexPath"
IndexButtonTitle="IndexButtonTitle"
RefreshButtonTitle="RefreshButtonTitle"
OnRefresh="RefreshAsync"/>

<FluentStack Orientation="Orientation.Vertical" Width="100%" Style="padding:10px;padding-right:20px;">
    <FluentLabel Typo="Typography.PageTitle">@(CreateMode?AddTitle:string.Format(EditTitle, EntityId))</FluentLabel>
    @if (ViewModel is not null)
    {
        <FluentGrid Style="width:100%;">
            <FluentGridItem xs="12" md="3">
                <HexIdField ReadOnly="@(!CreateMode)" @bind-Value="ViewModel.Id"></HexIdField>
            </FluentGridItem>
            <FluentGridItem xs="12" md="@(CreateMode ? 9 : 7)">
                <HexNameField ReadOnly="@ViewModel.Disabled" @bind-Value="ViewModel.Name"></HexNameField>
            </FluentGridItem>
            @if (!CreateMode)
            {
                <FluentGridItem xs="12" md="2">
                    <HexDisabledCheckbox ReadOnly="true" Value="ViewModel.Disabled" />
                </FluentGridItem>
            }
            <FluentGridItem xs="12" md="12">
                <HexCommentsField ReadOnly="@ViewModel.Disabled" @bind-Value="ViewModel.Comments"></HexCommentsField>
            </FluentGridItem>
        </FluentGrid>
    }
    @ChildContent
    <FluentSpacer />
    <HexSaveButton Appearance="Appearance.Accent" OnClick="OnSaveAsync" />
    <FluentSpacer />
    <HexValidationSummary ValidationResult="ValidationResult"></HexValidationSummary>
</FluentStack>


@code {
    [Parameter]
    [EditorRequired]
    public string? EntityId { get; set; }

    [Parameter]
    [EditorRequired]
    public TEntityViewModel? ViewModel { get; set; }

    [Parameter]
    public EventCallback<TEntityViewModel> DataChanged { get; set; }

    [Parameter]
    [EditorRequired]
    public ValidationResult? ValidationResult { get; set; }

    [Parameter]
    [EditorRequired]
    public required string AddTitle { get; set; }

    [Parameter]
    [EditorRequired]
    public required string EditTitle { get; set; }

    [Parameter]
    public bool ShowAdministratorTools { get; set; }

    [Parameter]
    public string? RefreshButtonTitle { get; set; }

    [Parameter]
    public string? IndexButtonTitle { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public required string IndexPath { get; set; }

    [Parameter]
    [EditorRequired]
    public required Func<Task<SaveResult>> OnSave { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback OnLoadData { get; set; }

    private bool CreateMode => string.IsNullOrWhiteSpace(EntityId);

    protected override async Task OnInitializedAsync()
    {
        await OnLoadData.InvokeAsync();
        await base.OnInitializedAsync();
    }

    private async Task RefreshAsync()
    {
        await OnLoadData.InvokeAsync();
        StateHasChanged();
    }

    private void Index()
    {
        NavigationManager.NavigateTo(IndexPath);
    }
    private async Task OnSaveAsync()
    {
        try
        {
            var result = await OnSave();
            switch (result.Result)
            {
                case ExecuteSaveResult.Success:
                    ToastService.ShowSuccess(string.Format(Labels.SaveSuccess, ViewModel?.Id));
                    return;
                case ExecuteSaveResult.ValidationFailed:
                    ToastService.ShowWarning(Labels.ValidationFailed);
                    break;
                case ExecuteSaveResult.CustomError:
                    ToastService.ShowError(string.Format(Labels.SaveError, ViewModel?.Id, result.Message));
                    break;
                case ExecuteSaveResult.InternalError:
                    ToastService.ShowError(Labels.InternalError);
                    break;
                case ExecuteSaveResult.NoChangesToApply:
                    ToastService.ShowInfo(Labels.NoChangesToApply);
                    break;
                case ExecuteSaveResult.Unauthorized:
                    ToastService.ShowError(Labels.SaveUnauthorized);
                    break;
            }
        }
        catch (Exception ex)
        {
            // An error occurred while saving the data.
            ToastService.ShowError(string.Format(Labels.SaveError, ViewModel?.Id, ex.FullMessage()));
        }
        StateHasChanged();
    }
}