@using Hexalith.Application.Services
@using Hexalith.Application.Sessions.Models
@using Hexalith.Application.Sessions.Services
@inject ISessionIdService SessionIdService
@inject ISessionService SessionService
@inject NavigationManager NavigationManager
@implements IDisposable

<CascadingValue Name="Session" Value="@_session">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private SessionInformation? _session;
    private Timer? _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await RefreshSessionInfo();

        // Optional: Set up periodic refresh
        _refreshTimer = new Timer(async _ => await RefreshSessionInfo(), null, TimeSpan.FromMinutes(5), TimeSpan.FromMinutes(5));
    }

    private async Task RefreshSessionInfo()
    {
        var sessionId = await SessionIdService.GetSessionIdAsync();
        if (string.IsNullOrWhiteSpace(sessionId))
        {
            NavigationManager.NavigateTo("/session/open");
        }
        if (_session == null || _session.Id != sessionId)
        {
            _session = await SessionService.GetAsync(sessionId, CancellationToken.None);
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}